// styles/layout/_flex.scss

// Import necessary modules using the modern @use rule
@use '../base/globals';
@use 'sass:map';
@use 'sass:string'; // Import string module for potential manipulation if needed
@use 'sass:meta'; // Import meta module for type checking
@use '../spacing/gaps' as gaps; // Import gap mixin from spacing

// 2. Core Flex Container Mixin (Internal Helper - Unchanged)
@mixin _flex-container($direction: row, $display: flex) {
  display: $display;
  flex-direction: $direction;
}

// --- Public Mixins (Definitions Unchanged) ---
// The public mixins remain the same; the change is in the internal helper they call.
/**
 * Creates a horizontal block-level flex container.
 * @param {String | Null} $gap-size [null] - Optional gap size key (xs, sm, md, lg, xl, 2xl). Accepts quoted or unquoted.
 */
@mixin flex-row($gap-size: null) {
  @include _flex-container(row, flex);
  @include gaps.gap($gap-size);
}

/**
 * Creates a vertical block-level flex container.
 * @param {String | Null} $gap-size [null] - Optional gap size key (xs, sm, md, lg, xl, 2xl). Accepts quoted or unquoted.
 */
@mixin flex-col($gap-size: null) {
  @include _flex-container(column, flex);
  @include gaps.gap($gap-size);
}

/**
 * Creates a horizontal inline-level flex container.
 * @param {String | Null} $gap-size [null] - Optional gap size key (xs, sm, md, lg, xl, 2xl). Accepts quoted or unquoted.
 */
@mixin inline-flex-row($gap-size: null) {
  @include _flex-container(row, inline-flex);
  @include gaps.gap($gap-size);
}

/**
 * Creates a vertical inline-level flex container.
 * @param {String | Null} $gap-size [null] - Optional gap size key (xs, sm, md, lg, xl, 2xl). Accepts quoted or unquoted.
 */
@mixin inline-flex-col($gap-size: null) {
  @include _flex-container(column, inline-flex);
  @include gaps.gap($gap-size);
}

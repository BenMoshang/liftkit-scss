// styles/components/_cards.scss
// --------------------------------------------------------------
// Cards Component
// --------------------------------------------------------------
/**
 * Responsive card component with dynamic padding and border-radius
 * based on typography scale. It sets CSS variable --card-scale-factor
 * to adjust spacing relative to content size. Supports automatic
 * detection via :has() and explicit modifier classes.
 * Requires browser support for CSS :has(): https://caniuse.com/css-has
 */

@use 'sass:math';
@use '../base/globals';
@use '../appearance/colors';
@use '../typography/typography';

/**
 * Map of typography scales for different content types.
 * Keys match class names for detection (:has()) and modifier suffixes (--name).
 */
$card-scale-sizes: (
  overline: globals.inline-size('3xs'),
  caption: globals.inline-size('2xs'),
  label: globals.inline-size('xs'),
  callout: globals.inline-size('sm'),
  body: globals.inline-size('md'),
  subheading: globals.inline-size('md'),
  heading: globals.inline-size('lg'),
  'title-c': globals.inline-size('lg'),
  'title-b': globals.inline-size('xl'),
  'title-a': globals.inline-size('2xl'),
  'display-2': globals.inline-size('3xl'),
  'display-1': globals.inline-size('4xl'),
);

/**
 * Default scale size for fallback (body size).
 */
$default-scale: map-get($card-scale-sizes, body);

/**
 * Mixin sets --card-scale-factor CSS variable by rounding the given scale.
 */
@mixin card-scale($scale) {
  @if type-of($scale) != number {
    @error "#{$scale} is not a number";
  }
  --card-scale-factor: #{globals.round-to($scale)};
}

/**
 * Card root styles
 */
.card {
  @include colors.bg__surface;
  position: relative;
  overflow: hidden;

  // Padding and border-radius based on scale factor
  padding: calc(
      var(--card-scale-factor, #{$default-scale}) /
        #{globals.round-to(globals.$MAJOR-HALF)}
    )
    var(--card-scale-factor, #{$default-scale});
  border-radius: calc(
    var(--card-scale-factor, #{$default-scale}) /
      #{globals.round-to(globals.$MAJOR-HALF)}
  );

  // --- Automatic detection of content scale via :has() ---
  @each $name, $size in $card-scale-sizes {
    :where(&:has(.#{$name})) {
      @include card-scale($size);
    }
  }

  // --- Explicit modifier classes for manual scale ---
  @each $name, $size in $card-scale-sizes {
    &--#{$name} {
      @include card-scale($size);
    }
  }
}
